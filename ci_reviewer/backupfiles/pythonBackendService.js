// api/pythonBackendService.js

/**
 * Service to connect React frontend to Python backend SAP Integration tools
 */

import axios from 'axios';

// Base configuration - adjust as needed for your environment
const BACKEND_URL = process.env.REACT_APP_PYTHON_BACKEND_URL || 'http://localhost:5000';

// Create axios instance for Python backend
const pythonBackendClient = axios.create({
  baseURL: BACKEND_URL,
  headers: {
    'Content-Type': 'application/json'
  },
  timeout: 30000 // 30 second timeout for backend operations
});

/**
 * Execute SAP extraction operations using the Python backend
 * @param {Object} params - Parameters for the extraction
 * @returns {Promise} Promise with the extraction result
 */
export const executePythonExtraction = async (params) => {
  try {
    console.log('Executing Python extraction with params:', params);
    
    // Build the endpoint based on the action
    let endpoint = '/sap/extraction';
    if (params.action) {
      endpoint += `/${params.action}`;
    }
    
    // Make request to Python backend
    const response = await pythonBackendClient.post(endpoint, params);
    
    console.log('Python extraction response:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error executing Python extraction:', error);
    throw error;
  }
};

/**
 * Execute SAP Integration review with the Python backend
 * @param {Object} params - Review parameters
 * @returns {Promise} Promise with job details
 */
export const executePythonReview = async (params) => {
  try {
    console.log('Executing Python review with params:', params);
    
    // This uses the sap_integration_reviewer.py script
    const response = await pythonBackendClient.post('`/sap/review`', params);
    
    console.log('Python review job started:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error executing Python review:', error);
    
    // Provide meaningful error based on type
    if (error.message && error.message.includes('Network Error')) {
      throw new Error('Cannot connect to Python backend service. Please ensure the service is running.');
    }
    
    if (error.response && error.response.data) {
      throw new Error(error.response.data.message || 'Python backend error');
    }
    
    throw error;
  }
};

/**
 * Check status of a running Python review job
 * @param {string} jobId - ID of the review job
 * @returns {Promise} Promise with job status
 */
export const checkReviewStatus = async (jobId) => {
  try {
    const response = await pythonBackendClient.get(`/sap/review/${jobId}/status`);
    return response.data;
  } catch (error) {
    console.error('Error checking review status:', error);
    throw error;
  }
};

/**
 * Get review report generated by the Python backend
 * @param {string} jobId - ID of the review job
 * @returns {Promise} Promise with report data
 */
export const getReviewReport = async (jobId) => {
  try {
    const response = await pythonBackendClient.get(`/sap/review/${jobId}/report`);
    return response.data;
  } catch (error) {
    console.error('Error getting review report:', error);
    throw error;
  }
};

/**
 * Download a review report file
 * @param {string} jobId - ID of the review job
 * @param {string} format - Report format (md, pdf, html)
 * @returns {Promise} Promise with file data
 */
export const downloadReviewReport = async (jobId, format = 'md') => {
  try {
    const response = await pythonBackendClient.get(`/sap/review/${jobId}/download`, {
      params: { format },
      responseType: 'blob'
    });
    
    // Create a download link
    const url = window.URL.createObjectURL(new Blob([response.data]));
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `sap-review-${jobId}.${format}`);
    document.body.appendChild(link);
    link.click();
    link.remove();
    
    return { success: true };
  } catch (error) {
    console.error('Error downloading review report:', error);
    throw error;
  }
};