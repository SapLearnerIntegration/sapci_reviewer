import { apiClient } from './apiClient';

/**
 * Submit packages for review and generate a report
 * @param {Object} reviewParams - Parameters for the review
 * @returns {Promise} Promise with review job details
 */
export const submitPackageReview = async (reviewParams) => {
  try {
    // Connect to the Python backend API endpoint
    const response = await apiClient.post('/reviews', reviewParams);
    return response.data;
  } catch (error) {
    console.error('Error submitting package review:', error);
    // For development, return mock data
    return mockReviewSubmission(reviewParams);
  }
};

/**
 * Get the status of a review job
 * @param {string} jobId - ID of the review job
 * @returns {Promise} Promise with job status
 */
export const getReviewStatus = async (jobId) => {
  try {
    const response = await apiClient.get(`/reviews/${jobId}/status`);
    return response.data;
  } catch (error) {
    console.error('Error getting review status:', error);
    // For development, return mock data
    return {
      jobId,
      status: 'completed',
      progress: 100,
      startedAt: new Date(Date.now() - 60000).toISOString(),
      completedAt: new Date().toISOString()
    };
  }
};

/**
 * Get the report generated by a review job
 * @param {string} jobId - ID of the review job
 * @returns {Promise} Promise with report data
 */
export const getReviewReport = async (jobId) => {
  try {
    const response = await apiClient.get(`/reviews/${jobId}/report`);
    return response.data;
  } catch (error) {
    console.error('Error getting review report:', error);
    // For development, return mock data
    return mockReviewReport(jobId);
  }
};

/**
 * Download the review report as a file
 * @param {string} jobId - ID of the review job
 * @param {string} format - Format of the report (pdf, md, html)
 * @returns {Promise} Promise with file blob
 */
export const downloadReviewReport = async (jobId, format = 'md') => {
  try {
    const response = await apiClient.get(`/reviews/${jobId}/download?format=${format}`, {
      responseType: 'blob'
    });
    
    // Create a download link and trigger the download
    const url = window.URL.createObjectURL(new Blob([response.data]));
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `review-report-${jobId}.${format}`);
    document.body.appendChild(link);
    link.click();
    link.remove();
    
    return { success: true };
  } catch (error) {
    console.error('Error downloading review report:', error);
    throw error;
  }
};

/**
 * Mock review submission for development
 * @param {Object} reviewParams - Parameters for the review
 * @returns {Object} Mock response with job ID
 */
const mockReviewSubmission = (reviewParams) => {
  const jobId = `job-${Date.now()}`;
  
  // Simulate Python backend connection
  console.log('Simulating connection to Python backend...');
  console.log('Review params:', reviewParams);
  console.log(`Command to execute: python sap_integration_reviewer.py --query "${reviewParams.tenant}" --guidelines guidelines.md --llm ${reviewParams.model}`);
  
  return {
    success: true,
    jobId,
    message: 'Review job started successfully',
    estimatedCompletionTime: '2-5 minutes'
  };
};

/**
 * Mock review report for development
 * @param {string} jobId - ID of the review job
 * @returns {Object} Mock response with report data
 */
const mockReviewReport = (jobId) => {
  return {
    jobId,
    summary: {
      totalPackages: 3,
      totalIFlows: 8,
      highCompliance: 5,
      mediumCompliance: 2,
      lowCompliance: 1,
      overallCompliance: '75%'
    },
    packages: [
      {
        id: 'pkg1',
        name: 'Customer Integration Package',
        compliance: 'high',
        iflows: [
          { id: 'iflow1_1', name: 'Customer Data Sync', compliance: 'high', issues: [] },
          { id: 'iflow1_2', name: 'Customer Address Validation', compliance: 'high', issues: [] },
          { id: 'iflow1_3', name: 'Customer Profile Update', compliance: 'medium', issues: ['Missing error handling'] }
        ]
      },
      {
        id: 'pkg2',
        name: 'Vendor Integration Package',
        compliance: 'medium',
        iflows: [
          { id: 'iflow2_1', name: 'Vendor Onboarding', compliance: 'medium', issues: ['Inefficient mapping'] },
          { id: 'iflow2_2', name: 'Vendor Invoice Processing', compliance: 'high', issues: [] }
        ]
      }
    ],
    reportPath: '/housekeeping/reports/integration_review_summary.md',
    generatedAt: new Date().toISOString()
  };
};